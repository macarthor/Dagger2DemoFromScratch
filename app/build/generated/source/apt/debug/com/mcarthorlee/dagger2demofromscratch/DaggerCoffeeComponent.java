// Generated by Dagger (https://google.github.io/dagger).
package com.mcarthorlee.dagger2demofromscratch;

public final class DaggerCoffeeComponent implements CoffeeComponent {
  private DaggerCoffeeComponent() {}

  public static Builder builder() {
    return new Builder();
  }

  public static CoffeeComponent create() {
    return new Builder().build();
  }

  private Thermosiphon getThermosiphon() {
    return injectThermosiphon(Thermosiphon_Factory.newThermosiphon());
  }

  private CoffeeMaker getCoffeeMaker() {
    return injectCoffeeMaker(CoffeeMaker_Factory.newCoffeeMaker());
  }

  @Override
  public void injectToSomeInformationActivity(SomeInformationActivity someInformationActivity) {
    injectSomeInformationActivity(someInformationActivity);
  }

  private Thermosiphon injectThermosiphon(Thermosiphon instance) {
    Thermosiphon_MembersInjector.injectHeater(instance, new ElectricHeater());
    return instance;
  }

  private CoffeeMaker injectCoffeeMaker(CoffeeMaker instance) {
    CoffeeMaker_MembersInjector.injectHeater(instance, new ElectricHeater());
    CoffeeMaker_MembersInjector.injectPump(instance, getThermosiphon());
    return instance;
  }

  private SomeInformationActivity injectSomeInformationActivity(SomeInformationActivity instance) {
    SomeInformationActivity_MembersInjector.injectMCoffeeMaker(instance, getCoffeeMaker());
    return instance;
  }

  public static final class Builder {
    private Builder() {}

    public CoffeeComponent build() {
      return new DaggerCoffeeComponent();
    }
  }
}
