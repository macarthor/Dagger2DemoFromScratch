// Generated by Dagger (https://google.github.io/dagger).
package com.mcarthorlee.dagger2demofromscratch;

import dagger.internal.Factory;
import javax.inject.Provider;

public final class CoffeeMaker_Factory implements Factory<CoffeeMaker> {
  private final Provider<ElectricHeater> heaterProvider;

  private final Provider<Thermosiphon> pumpProvider;

  public CoffeeMaker_Factory(
      Provider<ElectricHeater> heaterProvider, Provider<Thermosiphon> pumpProvider) {
    this.heaterProvider = heaterProvider;
    this.pumpProvider = pumpProvider;
  }

  @Override
  public CoffeeMaker get() {
    CoffeeMaker instance = new CoffeeMaker();
    CoffeeMaker_MembersInjector.injectHeater(instance, heaterProvider.get());
    CoffeeMaker_MembersInjector.injectPump(instance, pumpProvider.get());
    return instance;
  }

  public static CoffeeMaker_Factory create(
      Provider<ElectricHeater> heaterProvider, Provider<Thermosiphon> pumpProvider) {
    return new CoffeeMaker_Factory(heaterProvider, pumpProvider);
  }

  public static CoffeeMaker newCoffeeMaker() {
    return new CoffeeMaker();
  }
}
