// Generated by Dagger (https://google.github.io/dagger).
package com.mcarthorlee.dagger2demofromscratch;

import dagger.MembersInjector;
import javax.inject.Provider;

public final class CoffeeMaker_MembersInjector implements MembersInjector<CoffeeMaker> {
  private final Provider<ElectricHeater> heaterProvider;

  private final Provider<Thermosiphon> pumpProvider;

  public CoffeeMaker_MembersInjector(
      Provider<ElectricHeater> heaterProvider, Provider<Thermosiphon> pumpProvider) {
    this.heaterProvider = heaterProvider;
    this.pumpProvider = pumpProvider;
  }

  public static MembersInjector<CoffeeMaker> create(
      Provider<ElectricHeater> heaterProvider, Provider<Thermosiphon> pumpProvider) {
    return new CoffeeMaker_MembersInjector(heaterProvider, pumpProvider);
  }

  @Override
  public void injectMembers(CoffeeMaker instance) {
    injectHeater(instance, heaterProvider.get());
    injectPump(instance, pumpProvider.get());
  }

  public static void injectHeater(Object instance, Object heater) {
    ((CoffeeMaker) instance).heater = (ElectricHeater) heater;
  }

  public static void injectPump(Object instance, Object pump) {
    ((CoffeeMaker) instance).pump = (Thermosiphon) pump;
  }
}
